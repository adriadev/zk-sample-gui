<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	                    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">

	<display-name>zkoss</display-name>

	<!-- START H2 Database -->
	<!-- (only used here for the demonstration app. ) -->
	<!-- properties for starting the H2 DB server. -->
	<context-param>
		<param-name>db.url</param-name>
		<param-value>jdbc:h2:mem:zksampledb</param-value>
	</context-param>
	<context-param>
		<param-name>db.user</param-name>
		<param-value>sa</param-value>
	</context-param>
	<context-param>
		<param-name>db.password</param-name>
		<param-value>sa</param-value>
	</context-param>
	<context-param>
		<param-name>db.tcpServer</param-name>
		<param-value>-tcpAllowOthers</param-value>
	</context-param>

	<!-- These modified class starts the H2 Db Server -->
	<!-- and call a method for creating the demo data. -->
	<listener>
		<listener-class>de.forsthaus.zksample.My_H2_DBStarter</listener-class>
	</listener>
	<!-- END H2 Database  -->


	<!-- ################################################# -->
	<!--            SPRING-Security Entry Point            -->
	<!-- ================================================= -->
	<!--  Here in the web.xml we do only set a referrence. -->
	<!--            The exact configuration is in          -->
	<!--           the SpringSecurityContext.xml           -->
	<!--  Look in the documentation. Spring security works -->
	<!--  exactly down the chain points.                   -->
	<!--  For not declared points in the                   -->
	<!-- SpringSecurityContext.xml Spring take             -->
	<!-- default values.                                   -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<!--       Spring-Security is mapped to all URLs       -->
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<listener>
		<listener-class>
			org.springframework.security.ui.session.HttpSessionEventPublisher</listener-class>
	</listener>
	<!--  END SPRING-Security -->



	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:applicationContext-db.xml,
			classpath:applicationContext-hibernate.xml,
 			/WEB-INF/SpringSecurityContext.xml
		</param-value>
	</context-param>

	<!--  START SPRING -->
	<listener>
		<display-name>Spring Context Loader</display-name>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>
			org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<!-- END Spring  -->

	<!-- Hibernate OpenSession Filter -->
	<!--
		<filter> <filter-name>hibernateFilter</filter-name> <filter-class>
		org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
		<init-param> <param-name>sessionFactoryBeanName</param-name>
		<param-value>sessionFactory</param-value> </init-param> </filter>

		<filter-mapping> <filter-name>hibernateFilter</filter-name>
		<url-pattern>/*</url-pattern> </filter-mapping>
	-->
	<!-- END Hibernate  -->




	<!--  START ZKoss -->
	<listener>
		<description>Used to cleanup when a session is destroyed</description>
		<display-name>ZK Session Cleaner</display-name>
		<listener-class>org.zkoss.zk.ui.http.HttpSessionListener</listener-class>
	</listener>

	<servlet>
		<description>The servlet loads the DSP pages.</description>
		<servlet-name>dspLoader</servlet-name>
		<servlet-class>org.zkoss.web.servlet.dsp.InterpreterServlet</servlet-class>
	</servlet>
	<servlet>
		<description>ZK loader for ZUML pages</description>
		<servlet-name>zkLoader</servlet-name>
		<servlet-class>org.zkoss.zk.ui.http.DHtmlLayoutServlet</servlet-class>
		<!--
			Must. Specifies URI of the update engine (DHtmlUpdateServlet). It
			must be the same as <url-pattern> for the update engine.
		-->
		<init-param>
			<param-name>update-uri</param-name>
			<param-value>/zkau</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet>
		<description>The asynchronous update engine for ZK</description>
		<servlet-name>auEngine</servlet-name>
		<servlet-class>org.zkoss.zk.au.http.DHtmlUpdateServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>dspLoader</servlet-name>
		<url-pattern>*.dsp</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>zkLoader</servlet-name>
		<url-pattern>*.zul</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>zkLoader</servlet-name>
		<url-pattern>*.zhtml</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>auEngine</servlet-name>
		<url-pattern>/zkau/*</url-pattern>
	</servlet-mapping>
	<!--  END ZKoss -->



	<!-- ////////////////////// -->
	<!-- Miscellaneous -->
	<session-config>
		<session-timeout>60</session-timeout>
		<timeout-uri>/timeout.zul</timeout-uri>
	</session-config>

	<welcome-file-list>
		<welcome-file>index.zul</welcome-file>
		<welcome-file>index.zhtml</welcome-file>
	</welcome-file-list>

	<!--
		'distributable' Make the application suitable for running in an
		distributed environment like a tomcat clustering
	-->
	<distributable />

</web-app>